name: Pipeline

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build e push do frontend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/simtefac-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/simtefac-frontend:latest

      - name: Build e push do backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/simtefac-backend:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/simtefac-backend:latest

      - name: Acesso SSH e deploy na VM
        uses: appleboy/ssh-action@v1.0.0
        env:
          FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/simtefac-frontend:latest
          BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/simtefac-backend:latest
          JWT_KEY: ${{ secrets.JWT_KEY }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_SMTP_DEFAULT_FROM: ${{ secrets.EMAIL_SMTP_DEFAULT_FROM }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/deploy
            cd ~/deploy

            # Cria o arquivo backend.env com as variáveis sensíveis
            cat <<EOF > backend.env
            API_VERSION=1.0.0
            JWT_KEY=${JWT_KEY}
            JWT_EXPIRATION=14d

            DB_HOST=host.docker.internal
            DB_PORT=1433
            DB_USERNAME=${DB_USERNAME}
            DB_PASSWORD=${DB_PASSWORD}
            DB_DATABASE=SIMTEFAC

            EMAIL_SMTP_HOST=smtp.gmail.com
            EMAIL_SMTP_PORT=465
            EMAIL_USER=${EMAIL_USER}
            EMAIL_PASSWORD=${EMAIL_PASSWORD}
            EMAIL_SMTP_DEFAULT_FROM=${EMAIL_SMTP_DEFAULT_FROM}
            NODE_ENV=production
            PORT=3000
            EOF


            # Cria docker-compose.yml
            cat <<EOF > docker-compose.yml
            version: '3.8'
            services:
              frontend:
                image: ${FRONTEND_IMAGE}
                ports:
                  - '80:80'
                restart: always
                depends_on:
                  - backend

              backend:
                image: ${BACKEND_IMAGE}
                ports:
                  - '3000:3000'
                restart: always
                env_file:
                  - ./backend.env
                volumes:
                  - ./ssl:/app/ssl
                  - ./file:/app/file
            EOF

            # Cria pastas bind (caso não existam)
            mkdir -p ssl file

            docker pull ${FRONTEND_IMAGE}
            docker pull ${BACKEND_IMAGE}
            docker compose up -d
